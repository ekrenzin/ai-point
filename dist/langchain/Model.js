"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LangChainModel = void 0;
const openai_1 = require("langchain/llms/openai");
const openai_2 = require("langchain/embeddings/openai");
const dotenv_1 = __importDefault(require("dotenv"));
dotenv_1.default.config();
/**
 * The LangChainModel class acts as a singleton wrapper around the OpenAI model.
 * It ensures there is only one instance of the model running and provides access to it.
 */
class LangChainModel {
    /**
     * Initializes the LangChainModel instance with an OpenAI model.
     * @private
     */
    constructor() {
        const model = new openai_1.OpenAI({
            temperature: 0.5,
            modelName: "gpt-3.5-turbo",
            maxTokens: 1000,
        });
        const embeddings = new openai_2.OpenAIEmbeddings({});
        this.model = model;
        this.embeddings = embeddings;
    }
    /**
     * Initializes the LangChainModel singleton instance.
     * @public
     */
    static init() {
        if (!LangChainModel.instance) {
            LangChainModel.instance = new LangChainModel();
        }
    }
    /**
     * Returns the LangChainModel singleton instance.
     * Throws an error if the instance has not been initialized.
     * @returns {LangChainModel} The singleton instance of LangChainModel
     * @public
     */
    static getInstance() {
        LangChainModel.validateLangChainModel();
        return LangChainModel.instance;
    }
    /**
     * Returns the OpenAI model associated with the LangChainModel singleton instance.
     * Throws an error if the instance has not been initialized.
     * @returns {OpenAI} The OpenAI model instance
     * @public
     */
    static getModel() {
        LangChainModel.validateLangChainModel();
        return LangChainModel.instance.model;
    }
    /**
     * Returns the openAI Embeddings associated with the LangChainModel singleton instance.
     * Throws an error if the instance has not been initialized.
     * @returns {OpenAIEmbeddings} The OpenAI embeddings instance
     * @public
     */
    static getEmbeddings() {
        LangChainModel.validateLangChainModel();
        return LangChainModel.instance.embeddings;
    }
    /**
     * Generates a completion using the OpenAI model.
     * @param {string} prompt - The initial string to complete
     * @returns {Promise<string>} The completed string generated by the model
     * @public
     */
    complete(prompt) {
        return __awaiter(this, void 0, void 0, function* () {
            const completion = yield this.model.call(prompt);
            return completion;
        });
    }
    /**
     * Validates if the LangChainModel instance has been initialized.
     * Throws an error if the instance has not been initialized.
     * @throws {Error} If the LangChainModel instance has not been initialized
     * @private
     */
    static validateLangChainModel() {
        if (!LangChainModel.instance)
            throw new Error("LangChainModel instance not initialized");
    }
}
exports.LangChainModel = LangChainModel;
//# sourceMappingURL=Model.js.map