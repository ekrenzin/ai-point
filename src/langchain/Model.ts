import { OpenAI } from 'langchain/llms/openai'
import { OpenAIEmbeddings } from 'langchain/embeddings/openai'
import dotenv from 'dotenv';
dotenv.config();


/**
 * The LangChainModel class acts as a singleton wrapper around the OpenAI model.
 * It ensures there is only one instance of the model running and provides access to it.
 */
class LangChainModel {
  private static instance: LangChainModel
  private model: OpenAI
  private embeddings: OpenAIEmbeddings;

  /**
   * Initializes the LangChainModel instance with an OpenAI model.
   * @private
   */
  private constructor() {
    const model = new OpenAI({ temperature: 0.5, modelName: 'text-davinci-003', maxTokens: 1000 })
    const embeddings = new OpenAIEmbeddings({ })
    this.model = model
    this.embeddings = embeddings
  }

  /**
   * Initializes the LangChainModel singleton instance.
   * @public
   */
  public static init(): void {
    if (!LangChainModel.instance) {
      LangChainModel.instance = new LangChainModel()
    }
  }

  /**
   * Returns the LangChainModel singleton instance.
   * Throws an error if the instance has not been initialized.
   * @returns {LangChainModel} The singleton instance of LangChainModel
   * @public
   */
  public static getInstance(): LangChainModel {
    LangChainModel.validateLangChainModel()
    return LangChainModel.instance
  }

  /**
   * Returns the OpenAI model associated with the LangChainModel singleton instance.
   * Throws an error if the instance has not been initialized.
   * @returns {OpenAI} The OpenAI model instance
   * @public
   */
  public static getModel(): OpenAI {
    LangChainModel.validateLangChainModel()
    return LangChainModel.instance.model
  }

  /**
   * Returns the openAI Embeddings associated with the LangChainModel singleton instance.
   * Throws an error if the instance has not been initialized.
   * @returns {OpenAIEmbeddings} The OpenAI embeddings instance
   * @public
    */
  public static getEmbeddings(): OpenAIEmbeddings {
    LangChainModel.validateLangChainModel()
    return LangChainModel.instance.embeddings
  }

  /**
   * Generates a completion using the OpenAI model.
   * @param {string} prompt - The initial string to complete
   * @returns {Promise<string>} The completed string generated by the model
   * @public
   */
  public async complete(prompt: string): Promise<string> {
    const completion = await this.model.call(prompt)
    return completion
  }

  /**
   * Validates if the LangChainModel instance has been initialized.
   * Throws an error if the instance has not been initialized.
   * @throws {Error} If the LangChainModel instance has not been initialized
   * @private
   */
  private static validateLangChainModel(): void {
    if (!LangChainModel.instance) throw new Error('LangChainModel instance not initialized');
  }
}

export { LangChainModel }
